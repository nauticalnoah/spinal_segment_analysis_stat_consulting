ggplot(aes(color = posture)) +
# confidence interval
geom_point(aes(y = posture, x = emmean), size = 3) +
# geom_errorbar(aes(y = posture, xmin = asymp.LCL, xmax = asymp.UCL)) +
geom_errorbar(aes(y = posture, xmin = lower.CL, xmax = upper.CL), width = 0, size = 2) +
# prediction interval
geom_point(data = model_preds_lb_pi,
aes(y = posture, x = prediction)) +
geom_errorbar(data = model_preds_lb_pi,
aes(y = posture, xmin = lower.PL, xmax = upper.PL), width =0, size = 3, alpha = .4) +
geom_vline(aes(xintercept = xint), lty = 2, color = "red", data = data.frame(xint = 0)) +
# observed
geom_point(data = model_data,
aes(x = lower_back,
y = posture),
alpha = 0.2) +
theme_minimal() +
labs(
title = "LMM: Lower Back Sensor",
x = "Angle X",
y = "Posture"
) +
theme(legend.position = "none",
plot.title.position = "plot")
lmer_mb <- lmer(mid_back ~ posture + (1 | participant), data = model_data)
plot(lmer_mb)
qqnorm(residuals(lmer_mb))
qqline(residuals(lmer_mb))
#| warning: false
custom_combos <- data.frame(
posture = model_data$posture %>% unique()
)
custom_preds <- ref_grid(
lmer_mb,
data = custom_combos,
cov.reduce = FALSE,
)
model_preds_mb <- emmeans(custom_preds,
specs = ~ posture,
type = "response"
) %>%
as_tibble()
model_preds_mb_pi <- predict(custom_preds,
specs = ~ posture,
type = "response",
interval = "prediction"
) %>%
as_tibble()
plot(custom_preds, PIs = TRUE, )
model_preds_mb %>%
ggplot(aes(color = posture)) +
# confidence interval
geom_point(aes(y = posture, x = emmean), size = 3) +
# geom_errorbar(aes(y = posture, xmin = asymp.LCL, xmax = asymp.UCL)) +
geom_errorbar(aes(y = posture, xmin = lower.CL, xmax = upper.CL), width = 0) +
# prediction interval
geom_point(data = model_preds_mb_pi,
aes(y = posture, x = prediction)) +
geom_errorbar(data = model_preds_mb_pi,
aes(y = posture, xmin = lower.PL, xmax = upper.PL), width = 0, size = 2, alpha = .4) +
geom_vline(aes(xintercept = xint), lty = 2, color = "red", data = data.frame(xint = 0)) +
# observed
geom_point(data = model_data,
aes(x = mid_back,
y = posture),
alpha = 0.2) +
theme_minimal() +
labs(
title = "LMM: Mid Back Sensor",
x = "Angle X",
y = "Posture"
) +
theme(legend.position = "none",
plot.title.position = "plot")
lmer_n <- lmer(neck ~ posture + (1 | participant), data = model_data)
plot(lmer_n)
qqnorm(residuals(lmer_n))
qqline(residuals(lmer_n))
#| warning: false
custom_combos <- data.frame(
posture = model_data$posture %>% unique()
)
custom_preds <- ref_grid(
lmer_n,
data = custom_combos,
cov.reduce = FALSE,
)
model_preds_n <- emmeans(custom_preds,
specs = ~ posture,
type = "response"
) %>%
as_tibble()
model_preds_n_pi <- predict(custom_preds,
specs = ~ posture,
type = "response",
interval = "prediction"
) %>%
as_tibble()
plot(custom_preds, PIs = TRUE)
model_preds_n %>%
ggplot(aes(color = posture)) +
# confidence interval
geom_point(aes(y = posture, x = emmean), size = 3) +
# geom_errorbar(aes(y = posture, xmin = asymp.LCL, xmax = asymp.UCL)) +
geom_errorbar(aes(y = posture, xmin = lower.CL, xmax = upper.CL), width = 0) +
# prediction interval
geom_point(data = model_preds_n_pi,
aes(y = posture, x = prediction)) +
geom_errorbar(data = model_preds_n_pi,
aes(y = posture, xmin = lower.PL, xmax = upper.PL), width = 0, size = 2, alpha = .4) +
geom_vline(aes(xintercept = xint), lty = 2, color = "red", data = data.frame(xint = 0)) +
# observed
geom_point(data = model_data,
aes(x = neck,
y = posture),
alpha = 0.2) +
theme_minimal() +
labs(
title = "LMM: Neck Sensor",
x = "Angle X",
y = "Posture"
) +
theme(legend.position = "none",
plot.title.position = "plot")
plot_classifications <- function(df, PI, loc, p) {
# Filter data for this participant and location
plot_data <- df %>%
filter(participant == p, device_location == loc)
# Extract good posture prediction interval limits
good_lower <- PI %>% filter(posture == "good") %>% pull(lower.PL)
good_upper <- PI %>% filter(posture == "good") %>% pull(upper.PL)
# TEMP Definition of Meh Posture
# meh_low_lower <- good_lower - 3
# meh_low_upper <- good_lower
# meh_high_lower <- good_upper
# meh_high_upper <- good_upper + 3
# --- Calculate Posture Proportions ---
plot_data_classified <- plot_data %>%
mutate(
# Classify each data point
posture_group = case_when(
normalized_angle_x >= good_lower & normalized_angle_x <= good_upper ~ "Good",
# (normalized_angle_x >= meh_low_lower & normalized_angle_x < good_lower) |
# (normalized_angle_x > good_upper & normalized_angle_x <= meh_high_upper) ~ "Meh",
TRUE ~ "Bad"
),
# posture_group = factor(posture_group, levels = c("Good", "Meh", "Bad"))
posture_group = factor(posture_group, levels = c("Good", "Bad"))
)
# Calculate proportions for each posture group
proportions_tbl <- plot_data_classified %>%
group_by(posture_group) %>%
summarise(proportion = n() / nrow(plot_data_classified)) %>%
complete(posture_group, fill = list(proportion = 0)) %>%
arrange(posture_group)
# Create legend labels with proportions
legend_labels_with_props <- paste0(
proportions_tbl$posture_group,
" (",
scales::percent(proportions_tbl$proportion, accuracy = 1),
")"
)
# --- End Calculate Posture Proportions ---
# Define x-axis limits for the background rectangles (assuming normalized time 0-1)
xmin_rect <- 0
xmax_rect <- 1
# Define y-axis limits for the different posture classification zones
# ymin_rect <- c(-Inf, meh_low_lower, good_lower, good_upper, meh_high_upper)
# ymax_rect <- c(meh_low_lower, good_lower, good_upper, meh_high_upper, Inf)
ymin_rect <- c(-Inf, good_lower, good_upper)
ymax_rect <- c(good_lower, good_upper, Inf)
# Create a dataframe for the background rectangles representing posture zones
time_ranges <- data.frame(
xmin = xmin_rect,
xmax = xmax_rect,
ymin = ymin_rect,
ymax = ymax_rect,
# posture_cat = factor(c("Bad", "Meh", "Good", "Meh", "Bad"),
#                      levels = c("Good", "Meh", "Bad"))
posture_cat = factor(c("Bad", "Good", "Bad"),
levels = c("Good", "Bad"))
)
# Generate the plot
classification_plot <- ggplot(plot_data) +
# Line plot for the actual data
geom_line(aes(x = normalized_chip_time, y = normalized_angle_x)) +
# Rectangles for posture zones
geom_rect(
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = posture_cat),
alpha = 0.4,
data = time_ranges
) +
theme_minimal() +
labs(
title = paste("Posture Classification for Participant", p),
subtitle = paste("Location:", loc, "- 15min Free Section"),
x = "Normalized Chip Time",
y = "Normalized Angle X",
fill = "Posture Type"
) +
scale_fill_manual(
# values = c("Good" = "seagreen3", "Meh" = "gold", "Bad" = "salmon"),
values = c("Good" = "seagreen3", "Bad" = "salmon"),
# breaks = c("Good", "Meh", "Bad"),
breaks = c("Good", "Bad"),
labels = legend_labels_with_props
)
print(proportions_tbl)
return(classification_plot)
}
plot_classifications_advanced <- function(df, PI, loc, p) {
# Filter data for this participant and location
plot_data <- df %>%
filter(participant == p, device_location == loc)
# Remove "laying back" posture
PI <- PI %>% filter(posture != "laying back")
# Get unique postures from PI
postures <- levels(droplevels(PI$posture, exclude = "laying back"))
# --- Calculate Posture Proportions ---
# Create a list of posture intervals for classification
posture_intervals <- PI %>%
select(posture, lower.PL, upper.PL) %>%
split(.$posture)
# Classify each data point
plot_data_classified <- plot_data %>%
mutate(posture_group = "Unclassified")
# Apply classification by checking each posture's interval
for (post in postures) {
interval <- posture_intervals[[post]]
plot_data_classified <- plot_data_classified %>%
mutate(
posture_group = ifelse(
normalized_angle_x >= interval$lower.PL &
normalized_angle_x <= interval$upper.PL,
post,
posture_group
)
)
}
# Calculate proportions for each posture group
proportions_tbl <- plot_data_classified %>%
group_by(posture_group) %>%
summarise(proportion = n() / nrow(plot_data_classified)) %>%
complete(posture_group, fill = list(proportion = 0)) %>%
arrange(posture_group)
# Create legend labels with proportions
legend_labels_with_props <- paste0(
proportions_tbl$posture_group,
" (",
scales::percent(proportions_tbl$proportion, accuracy = 1),
")"
)
# --- End Calculate Posture Proportions ---
# Create a dataframe for the background rectangles representing posture zones
time_ranges <- PI %>%
select(posture, lower.PL, upper.PL) %>%
mutate(
xmin = 0,
xmax = 1,
ymin = lower.PL,
ymax = upper.PL
)
# Add unclassified areas
sorted_intervals <- PI %>%
arrange(lower.PL) %>%
select(lower.PL, upper.PL)
unclassified_ranges <- data.frame(ymin = numeric(), ymax = numeric())
if (min(sorted_intervals$lower.PL) > -Inf) {
unclassified_ranges <- rbind(unclassified_ranges,
data.frame(ymin = -Inf, ymax = min(sorted_intervals$lower.PL)))
}
for (i in 1:(nrow(sorted_intervals)-1)) {
if (sorted_intervals$upper.PL[i] < sorted_intervals$lower.PL[i+1]) {
unclassified_ranges <- rbind(unclassified_ranges,
data.frame(ymin = sorted_intervals$upper.PL[i],
ymax = sorted_intervals$lower.PL[i+1]))
}
}
if (max(sorted_intervals$upper.PL) < Inf) {
unclassified_ranges <- rbind(unclassified_ranges,
data.frame(ymin = max(sorted_intervals$upper.PL),
ymax = Inf))
}
if (nrow(unclassified_ranges) > 0) {
unclassified_ranges <- unclassified_ranges %>%
mutate(
posture = "Unclassified",
xmin = 0,
xmax = 1
)
}
# Combine all ranges
all_ranges <- bind_rows(
time_ranges,
unclassified_ranges
) %>%
mutate(
posture = factor(posture, levels = c(postures, "Unclassified"))
)
all_posture_levels <- c(postures, "Unclassified")
# Generate the plot
classification_plot <- plot_data %>%
ggplot() +
# Line plot for the actual data
geom_line(aes(x = normalized_chip_time, y = normalized_angle_x)) +
# Rectangles for posture zones
geom_rect(
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = posture),
alpha = 0.4,
data = all_ranges
) +
theme_minimal() +
labs(
title = paste("Posture Classification for Participant", p),
subtitle = paste("Location:", loc, "- 15min Free Section"),
x = "Normalized Chip Time",
y = "Normalized Angle X",
fill = "Posture Type"
)
print(proportions_tbl)
return(classification_plot)
}
plot_classifications(free_norm, model_preds_lb_pi, "lower_back", 3)
plot_classifications_advanced(free_norm, model_preds_lb_pi, "lower_back", 3)
plot_classifications(free_norm, model_preds_mb_pi, "mid_back", 3)
plot_classifications_advanced(free_norm, model_preds_mb_pi, "mid_back", 3)
plot_classifications(free_norm, model_preds_n_pi, "neck", 3)
plot_classifications_advanced(free_norm, model_preds_n_pi, "neck", 3)
#| message: false
#| warning: false
free_norm %>%
ggplot(aes(x = angle_x, y = participant, fill = device_location)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(
option = "D",
discrete = TRUE,
labels = c(
"lower_back" = "Lower Back",
"mid_back" = "Mid Back",
"neck" = "Neck"
)
) +
labs(
title = 'Distribution of Time Spent in Normalized Angle X by Participant',
fill = 'Device Type',
x = 'Angle X',
y = 'Participant'
) +
theme_ipsum() +
theme(
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlim(-50, 70)
#| message: false
#| warning: false
free_norm %>%
filter(device_location == 'lower_back') %>%
ggplot(aes(x = angle_x, y = participant, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(option = "C") +
labs(
title = 'Distribution of Time Spent in Normalized Angle X by Participant',
subtitle = 'Lower Back',
x = 'Angle X',
y = 'Participant'
) +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlim(-50, 70)
#| message: false
#| warning: false
free_norm %>%
filter(device_location == 'mid_back') %>%
ggplot(aes(x = angle_x, y = participant, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(option = "C") +
labs(
title = 'Distribution of Time Spent in Normalized Angle X by Participant',
subtitle = 'Mid Back',
x = 'Angle X',
y = 'Participant'
) +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlim(-50, 70)
#| message: false
#| warning: false
free_norm %>%
filter(device_location == 'neck') %>%
ggplot(aes(x = angle_x, y = participant, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(option = "C") +
labs(
title = 'Distribution of Time Spent in Normalized Angle X by Participant',
subtitle = 'Neck',
x = 'Angle X',
y = 'Participant'
) +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
) +
xlim(-50, 70)
lda_posture <- lda(posture ~ lower_back + mid_back + neck, data = model_data %>% filter(posture != "laying back"))
lda_posture
act_vs_pred <- model_data %>%
filter(posture != "laying back") %>%
drop_na() %>%
mutate(
posture = factor(posture),
lda_pred = factor(predict(lda_posture)$class)
)
caret::confusionMatrix(data = act_vs_pred$lda_pred, reference = act_vs_pred$posture)
predicted <- predict(lda_posture, free_norm)
lda_posture
free_norm
lda_posture
predicted <- predict(lda_posture, free_norm)
lda_plot <- cbind(model_data %>% filter(posture != "laying back") %>% drop_na(), predict(lda_posture)$x)
ggplot(lda_plot, aes(LD1, LD2)) +
geom_point(aes(color = posture)) +
theme_bw()
lda_plot <- cbind(model_data %>% filter(posture != "laying back") %>% drop_na(), predicted$x)
model_data
free_norm
plot(custom_preds, PIs = TRUE) + theme_bw()
lmer_lb
custom_combos
model_preds_lb
model_preds_lb_pi
model_preds_lb
model_preds_lb_pi
model_preds_lb %>%
left_join(model_preds_lb_pi, by = "posture")
model_preds_lb %>%
left_join(model_preds_lb_pi, by = "posture") %>%
mutate(CI = paste0("(", emmean - SE.x, ", ", emmean + SE.x, ")", sep = ""))
model_preds_lb %>%
left_join(model_preds_lb_pi, by = "posture") %>%
mutate(CI = paste0("(", round(emmean - SE.x, 4), ", ", round(emmean + SE.x, 4), ")", sep = ""))
model_preds_lb %>%
left_join(model_preds_lb_pi, by = "posture") %>%
mutate(
CI_95 = paste0("(", round(emmean - 1.96*SE.x, 2), ", ", round(emmean + 1.96*SE.x, 2), ")", sep = ""),
PI_95 = paste0("(", round(prediction - 1.96*SE.y, 2), ", ", round(prediction + 1.96*SE.y, 2), ")", sep = "")
)
model_preds_lb %>%
left_join(model_preds_lb_pi, by = "posture") %>%
mutate(
CI_95 = paste0("(", round(emmean - 1.96*SE.x, 2), ", ", round(emmean + 1.96*SE.x, 2), ")", sep = ""),
PI_95 = paste0("(", round(prediction - 1.96*SE.y, 2), ", ", round(prediction + 1.96*SE.y, 2), ")", sep = "")
)
select(posture, CI_95, PI_95)
model_preds_lb %>%
left_join(model_preds_lb_pi, by = "posture") %>%
mutate(
CI_95 = paste0("(", round(emmean - 1.96*SE.x, 2), ", ", round(emmean + 1.96*SE.x, 2), ")", sep = ""),
PI_95 = paste0("(", round(prediction - 1.96*SE.y, 2), ", ", round(prediction + 1.96*SE.y, 2), ")", sep = "")
) %>%
select(posture, CI_95, PI_95)
library(gt)
model_preds_lb %>%
left_join(model_preds_lb_pi, by = "posture") %>%
mutate(
CI = paste0("(", round(emmean - 1.96*SE.x, 2), ", ", round(emmean + 1.96*SE.x, 2), ")", sep = ""),
PI = paste0("(", round(prediction - 1.96*SE.y, 2), ", ", round(prediction + 1.96*SE.y, 2), ")", sep = "")
) %>%
select(posture, CI, PI) %>%
gt() %>%
tab_header(title = "95% Intervals for Lower Back")
model_preds_lb %>%
left_join(model_preds_lb_pi, by = "posture") %>%
mutate(
Posture = posture,
CI = paste0("(", round(emmean - 1.96*SE.x, 2), ", ", round(emmean + 1.96*SE.x, 2), ")", sep = ""),
PI = paste0("(", round(prediction - 1.96*SE.y, 2), ", ", round(prediction + 1.96*SE.y, 2), ")", sep = "")
) %>%
select(Posture, CI, PI) %>%
gt() %>%
tab_header(title = "95% Intervals for Lower Back")
model_preds_mb %>%
left_join(model_preds_mb_pi, by = "posture") %>%
mutate(
Posture = posture,
CI = paste0("(", round(emmean - 1.96*SE.x, 2), ", ", round(emmean + 1.96*SE.x, 2), ")", sep = ""),
PI = paste0("(", round(prediction - 1.96*SE.y, 2), ", ", round(prediction + 1.96*SE.y, 2), ")", sep = "")
) %>%
select(Posture, CI, PI) %>%
gt() %>%
tab_header(title = "95% Intervals for Mid Back")
model_preds_n %>%
left_join(model_preds_n_pi, by = "posture") %>%
mutate(
Posture = posture,
CI = paste0("(", round(emmean - 1.96*SE.x, 2), ", ", round(emmean + 1.96*SE.x, 2), ")", sep = ""),
PI = paste0("(", round(prediction - 1.96*SE.y, 2), ", ", round(prediction + 1.96*SE.y, 2), ")", sep = "")
) %>%
select(Posture, CI, PI) %>%
gt() %>%
tab_header(title = "95% Intervals for Neck")
plot(custom_preds, PIs = TRUE) + theme_bw()
